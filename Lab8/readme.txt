Because the genre of the external api i've been using involves pokemon, I wanted to keep to the same theme of video game characters and data. For the lab I wanted to go down the trading card path and so I took json data and api endpoint calls from yu-gi-oh, hearthstone, magic the gathering and pokemon - franchises that all of which have a trading card game. Having that in mind, the schema that I went for for this lab is the follow keys: id, name, archetype, attack, defense, image url. The vision I had for this lab was to operate as a giant virtual folder that holds card information from different trading cards games. For part 1, I did all the work from within my api (server.js). I have the functions commented out (4 one for each dataset that I pulled from) which normalized the data and inserted it into the mongodb. I used axios to make the external api calls that process the data and finally loaded it into my database. The GET, POST, PUT, and DELETE requests work as follows: The GET and DELETE takes the card_id as a query and as of right now only uses that parameter. Some complication I ran into was trying to use the name as a query but I did not have the time to figure out how to encode spaces and query the collection. The GET and DELETE request must have a valid and existing card id in order for the function to work. I had to resort to using the id which is not the most intuitive - some of the ids on the cards are several digits long. The POST and PUT requests are a little more intuitive in which we can put in any information as input and the POST request will create a new document with the information in the database. The PUT request does not mass update documents, and as of right now only works on an individual card (query with an id). The http service was giving me some trouble and there was a lot of different pieces in angular I had to make sure were absolutely correct in order for th http requests to work. From the input component I have to goto the parent component and then to the http service client and then to my api and then all the way back to the beginning except displaying the output of the calls. I heavily based lab 6 off of the previous lab4 and lab 5 work in order to get the job done. I did not have the proper time to style my page because I was heavily focused on getting the backend to work. The ZAP report is the file named report.txt

https://db.ygoprodeck.com/api-guide/ 
https://docs.magicthegathering.io/ 
https://hearthstonejson.com/docs/cards.html 
https://stackoverflow.com/questions/47236963/no-provider-for-httpclient
https://stackoverflow.com/questions/3455405/how-do-i-remove-a-key-from-a-javascript-object
https://delushaandelu.medium.com/how-to-run-angular-12-app-and-node-js-api-on-same-port-4200-for-both-production-and-development-96d1dc090787
https://www.w3schools.com/nodejs/nodejs_mongodb_update.asp